# -*- coding: utf-8 -*-
"""data_setup.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KoDF6GdSvX8eeYcVi-REiqNnZwClUnby
"""

import pandas as pd
import os
import shutil
from sklearn.model_selection import train_test_split

# --- Configuration ---
NUM_CLIENTS = 10
DATA_CSV_PATH = './dataset/Data_Entry_B-C.csv'
IMAGES_PATH = './dataset/images/'
CLIENT_DATA_PATH = './client_data/'

# --- End Configuration ---

def load_and_prepare_data():
    """Loads the main CSV and filters for existing images."""
    print("Loading dataset CSV...")
    df = pd.read_csv(DATA_CSV_PATH)

    # Find all available image files
    available_images = set(os.listdir(IMAGES_PATH))

    # Filter the DataFrame to only include rows with available images
    df = df[df['Image Index'].isin(available_images)]

    # For simplicity, we'll just use the main 'Finding Labels'
    # In a full implementation, you would multi-hot encode these
    df = df[['Image Index', 'Finding Labels']]

    print(f"Loaded {len(df)} available image records.")
    return df

def partition_data(df):
    """
    Partitions the DataFrame into non-IID shards to simulate clients.
    This is a simple sort-and-divide method for non-IID simulation.
    """
    print(f"Partitioning data for {NUM_CLIENTS} clients...")

    # Sort by label to create non-IID-ness
    df_sorted = df.sort_values(by='Finding Labels').reset_index(drop=True)

    # Calculate shard size and distribute
    num_shards = NUM_CLIENTS * 2  # e.g., 2 shards per client
    shard_size = len(df_sorted) // num_shards
    shards = [df_sorted.iloc[i*shard_size:(i+1)*shard_size] for i in range(num_shards)]

    # Clear previous client data
    if os.path.exists(CLIENT_DATA_PATH):
        shutil.rmtree(CLIENT_DATA_PATH)

    # Assign shards to clients
    for i in range(NUM_CLIENTS):
        client_dir = os.path.join(CLIENT_DATA_PATH, f'client_{i}')
        os.makedirs(client_dir, exist_ok=True)

        # Assign two shards to each client
        shard_1 = shards[i]
        shard_2 = shards[i + NUM_CLIENTS]
        client_df = pd.concat([shard_1, shard_2])

        # Save the client's data manifest
        client_df.to_csv(os.path.join(client_dir, 'data.csv'), index=False)

        # Copy image files (in a real scenario, you might just reference them)
        # For this simulation, we'll just save the manifest.
        # The training script will load images based on this manifest.

    print(f"Successfully partitioned data into {CLIENT_DATA_PATH}")

if __name__ == "__main__":
    df = load_and_prepare_data()
    partition_data(df)