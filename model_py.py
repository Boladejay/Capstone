# -*- coding: utf-8 -*-
"""model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15NXAFUONRiQpYteAYHPE4bIFRgkayKqC
"""

import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D

# --- Configuration ---
IMG_SIZE = (224, 224)
NUM_CLASSES = 14  # Based on the 14 pathologies in the dataset
# --- End Configuration ---

def create_model():
    """
    Creates and compiles a ResNet-50 model for multi-label classification.
    Uses transfer learning from ImageNet.
    """

    # 1. Load the pre-trained ResNet-50 base
    base_model = ResNet50(weights='imagenet',
                          include_top=False,
                          input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))

    # 2. Freeze the convolutional base
    base_model.trainable = False

    # 3. Add the custom classification head
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    # Use 'sigmoid' activation for multi-label classification
    predictions = Dense(NUM_CLASSES, activation='sigmoid')(x)

    # 4. Create the final model
    model = Model(inputs=base_model.input, outputs=predictions)

    # 5. Compile the model
    # Use BinaryCrossentropy for multi-label classification
    model.compile(optimizer=tf.keras.optimizers.Adam(),
                  loss='binary_crossentropy',
                  metrics=['accuracy']) # 'accuracy' is approximate for multi-label

    print("ResNet-50 model created and compiled.")
    return model

if __name__ == "__main__":
    model = create_model()
    model.summary()